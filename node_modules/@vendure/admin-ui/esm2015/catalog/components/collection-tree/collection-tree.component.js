import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { arrayToTree } from './array-to-tree';
export class CollectionTreeComponent {
    constructor() {
        this.expandAll = false;
        this.expandedIds = [];
        this.rearrange = new EventEmitter();
        this.deleteCollection = new EventEmitter();
        this.allMoveListItems = [];
    }
    ngOnChanges(changes) {
        if ('collections' in changes && this.collections) {
            this.collectionTree = arrayToTree(this.collections, this.collectionTree, this.expandedIds);
            this.allMoveListItems = [];
        }
    }
    onDrop(event) {
        const item = event.item.data;
        const newParent = event.container.data;
        const newParentId = newParent.id;
        if (newParentId == null) {
            throw new Error(`Could not determine the ID of the root Collection`);
        }
        this.rearrange.emit({
            collectionId: item.id,
            parentId: newParentId,
            index: event.currentIndex,
        });
    }
    onMove(event) {
        this.rearrange.emit(event);
    }
    onDelete(id) {
        this.deleteCollection.emit(id);
    }
    getMoveListItems(collection) {
        if (this.allMoveListItems.length === 0) {
            this.allMoveListItems = this.calculateAllMoveListItems();
        }
        return this.allMoveListItems.filter(item => {
            var _a;
            return item.id !== collection.id &&
                !item.ancestorIdPath.has(collection.id) &&
                item.id !== ((_a = collection.parent) === null || _a === void 0 ? void 0 : _a.id);
        });
    }
    calculateAllMoveListItems() {
        const visit = (node, parentPath, ancestorIdPath, output) => {
            const path = parentPath.concat(node.name);
            output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id, ancestorIdPath });
            node.children.forEach(child => visit(child, path, new Set([...ancestorIdPath, node.id]), output));
            return output;
        };
        return visit(this.collectionTree, [], new Set(), []);
    }
    isRootNode(node) {
        return !node.hasOwnProperty('parent');
    }
}
CollectionTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-collection-tree',
                template: "<vdr-collection-tree-node\r\n    *ngIf=\"collectionTree\"\r\n    cdkDropListGroup\r\n    [expandAll]=\"expandAll\"\r\n    [collectionTree]=\"collectionTree\"\r\n    [activeCollectionId]=\"activeCollectionId\"\r\n></vdr-collection-tree-node>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            },] }
];
CollectionTreeComponent.propDecorators = {
    collections: [{ type: Input }],
    activeCollectionId: [{ type: Input }],
    expandAll: [{ type: Input }],
    expandedIds: [{ type: Input }],
    rearrange: [{ type: Output }],
    deleteCollection: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,