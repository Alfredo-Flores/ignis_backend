/**
 * @description
 * A helper class used to manage selection of list items. Supports multiple selection via
 * cmd/ctrl/shift key.
 */
export class SelectionManager {
    constructor(options) {
        this.options = options;
        this._selection = [];
        this.items = [];
    }
    get selection() {
        return this._selection;
    }
    setMultiSelect(isMultiSelect) {
        this.options.multiSelect = isMultiSelect;
    }
    setCurrentItems(items) {
        this.items = items;
    }
    toggleSelection(item, event) {
        const { multiSelect, itemsAreEqual, additiveMode } = this.options;
        const index = this._selection.findIndex(a => itemsAreEqual(a, item));
        if (multiSelect && (event === null || event === void 0 ? void 0 : event.shiftKey) && 1 <= this._selection.length) {
            const lastSelection = this._selection[this._selection.length - 1];
            const lastSelectionIndex = this.items.findIndex(a => itemsAreEqual(a, lastSelection));
            const currentIndex = this.items.findIndex(a => itemsAreEqual(a, item));
            const start = currentIndex < lastSelectionIndex ? currentIndex : lastSelectionIndex;
            const end = currentIndex > lastSelectionIndex ? currentIndex + 1 : lastSelectionIndex;
            this._selection.push(...this.items.slice(start, end).filter(a => !this._selection.find(s => itemsAreEqual(a, s))));
        }
        else if (index === -1) {
            if (multiSelect && ((event === null || event === void 0 ? void 0 : event.ctrlKey) || (event === null || event === void 0 ? void 0 : event.shiftKey) || additiveMode)) {
                this._selection.push(item);
            }
            else {
                this._selection = [item];
            }
        }
        else {
            if (multiSelect && (event === null || event === void 0 ? void 0 : event.ctrlKey)) {
                this._selection.splice(index, 1);
            }
            else if (1 < this._selection.length && !additiveMode) {
                this._selection = [item];
            }
            else {
                this._selection.splice(index, 1);
            }
        }
        // Make the selection mutable
        this._selection = this._selection.map(x => (Object.assign({}, x)));
    }
    selectMultiple(items) {
        this._selection = items;
    }
    isSelected(item) {
        return !!this._selection.find(a => this.options.itemsAreEqual(a, item));
    }
    lastSelected() {
        return this._selection[this._selection.length - 1];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2NvbW1vbi91dGlsaXRpZXMvc2VsZWN0aW9uLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUE7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxnQkFBZ0I7SUFDekIsWUFBb0IsT0FBbUM7UUFBbkMsWUFBTyxHQUFQLE9BQU8sQ0FBNEI7UUFNL0MsZUFBVSxHQUFRLEVBQUUsQ0FBQztRQUNyQixVQUFLLEdBQVEsRUFBRSxDQUFDO0lBUGtDLENBQUM7SUFFM0QsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFLRCxjQUFjLENBQUMsYUFBc0I7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsYUFBYSxDQUFDO0lBQzdDLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBVTtRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBRUQsZUFBZSxDQUFDLElBQU8sRUFBRSxLQUFrQjtRQUN2QyxNQUFNLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2xFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksV0FBVyxLQUFJLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDL0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FB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PiB7XHJcbiAgICBtdWx0aVNlbGVjdDogYm9vbGVhbjtcclxuICAgIGl0ZW1zQXJlRXF1YWw6IChhOiBULCBiOiBUKSA9PiBib29sZWFuO1xyXG4gICAgYWRkaXRpdmVNb2RlOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEEgaGVscGVyIGNsYXNzIHVzZWQgdG8gbWFuYWdlIHNlbGVjdGlvbiBvZiBsaXN0IGl0ZW1zLiBTdXBwb3J0cyBtdWx0aXBsZSBzZWxlY3Rpb24gdmlhXHJcbiAqIGNtZC9jdHJsL3NoaWZ0IGtleS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25NYW5hZ2VyPFQ+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogU2VsZWN0aW9uTWFuYWdlck9wdGlvbnM8VD4pIHt9XHJcblxyXG4gICAgZ2V0IHNlbGVjdGlvbigpOiBUW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc2VsZWN0aW9uOiBUW10gPSBbXTtcclxuICAgIHByaXZhdGUgaXRlbXM6IFRbXSA9IFtdO1xyXG5cclxuICAgIHNldE11bHRpU2VsZWN0KGlzTXVsdGlTZWxlY3Q6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMubXVsdGlTZWxlY3QgPSBpc011bHRpU2VsZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIHNldEN1cnJlbnRJdGVtcyhpdGVtczogVFtdKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZVNlbGVjdGlvbihpdGVtOiBULCBldmVudD86IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBjb25zdCB7IG11bHRpU2VsZWN0LCBpdGVtc0FyZUVxdWFsLCBhZGRpdGl2ZU1vZGUgfSA9IHRoaXMub3B0aW9ucztcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX3NlbGVjdGlvbi5maW5kSW5kZXgoYSA9PiBpdGVtc0FyZUVxdWFsKGEsIGl0ZW0pKTtcclxuICAgICAgICBpZiAobXVsdGlTZWxlY3QgJiYgZXZlbnQ/LnNoaWZ0S2V5ICYmIDEgPD0gdGhpcy5fc2VsZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0U2VsZWN0aW9uID0gdGhpcy5fc2VsZWN0aW9uW3RoaXMuX3NlbGVjdGlvbi5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgY29uc3QgbGFzdFNlbGVjdGlvbkluZGV4ID0gdGhpcy5pdGVtcy5maW5kSW5kZXgoYSA9PiBpdGVtc0FyZUVxdWFsKGEsIGxhc3RTZWxlY3Rpb24pKTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gdGhpcy5pdGVtcy5maW5kSW5kZXgoYSA9PiBpdGVtc0FyZUVxdWFsKGEsIGl0ZW0pKTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBjdXJyZW50SW5kZXggPCBsYXN0U2VsZWN0aW9uSW5kZXggPyBjdXJyZW50SW5kZXggOiBsYXN0U2VsZWN0aW9uSW5kZXg7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IGN1cnJlbnRJbmRleCA+IGxhc3RTZWxlY3Rpb25JbmRleCA/IGN1cnJlbnRJbmRleCArIDEgOiBsYXN0U2VsZWN0aW9uSW5kZXg7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5wdXNoKFxyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5pdGVtcy5zbGljZShzdGFydCwgZW5kKS5maWx0ZXIoYSA9PiAhdGhpcy5fc2VsZWN0aW9uLmZpbmQocyA9PiBpdGVtc0FyZUVxdWFsKGEsIHMpKSksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgaWYgKG11bHRpU2VsZWN0ICYmIChldmVudD8uY3RybEtleSB8fCBldmVudD8uc2hpZnRLZXkgfHwgYWRkaXRpdmVNb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0aW9uLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb24gPSBbaXRlbV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobXVsdGlTZWxlY3QgJiYgZXZlbnQ/LmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKDEgPCB0aGlzLl9zZWxlY3Rpb24ubGVuZ3RoICYmICFhZGRpdGl2ZU1vZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbiA9IFtpdGVtXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE1ha2UgdGhlIHNlbGVjdGlvbiBtdXRhYmxlXHJcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uID0gdGhpcy5fc2VsZWN0aW9uLm1hcCh4ID0+ICh7IC4uLnggfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdE11bHRpcGxlKGl0ZW1zOiBUW10pIHtcclxuICAgICAgICB0aGlzLl9zZWxlY3Rpb24gPSBpdGVtcztcclxuICAgIH1cclxuXHJcbiAgICBpc1NlbGVjdGVkKGl0ZW06IFQpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLl9zZWxlY3Rpb24uZmluZChhID0+IHRoaXMub3B0aW9ucy5pdGVtc0FyZUVxdWFsKGEsIGl0ZW0pKTtcclxuICAgIH1cclxuXHJcbiAgICBsYXN0U2VsZWN0ZWQoKTogVCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvblt0aGlzLl9zZWxlY3Rpb24ubGVuZ3RoIC0gMV07XHJcbiAgICB9XHJcbn1cclxuIl19