import { assertNever } from '@vendure/common/lib/shared-utils';
/**
 * ConfigArg values are always stored as strings. If they are not primitives, then
 * they are JSON-encoded. This function unwraps them back into their original
 * data type.
 */
export function getConfigArgValue(value) {
    try {
        return value ? JSON.parse(value) : undefined;
    }
    catch (e) {
        return value;
    }
}
export function encodeConfigArgValue(value) {
    return Array.isArray(value) ? JSON.stringify(value) : (value !== null && value !== void 0 ? value : '').toString();
}
/**
 * Creates an empty ConfigurableOperation object based on the definition.
 */
export function configurableDefinitionToInstance(def) {
    return Object.assign(Object.assign({}, def), { args: def.args.map(arg => {
            return Object.assign(Object.assign({}, arg), { value: getDefaultConfigArgValue(arg) });
        }) });
}
/**
 * Converts an object of the type:
 * ```
 * {
 *     code: 'my-operation',
 *     args: {
 *         someProperty: 'foo'
 *     }
 * }
 * ```
 * to the format defined by the ConfigurableOperationInput GraphQL input type:
 * ```
 * {
 *     code: 'my-operation',
 *     args: [
 *         { name: 'someProperty', value: 'foo' }
 *     ]
 * }
 * ```
 */
export function toConfigurableOperationInput(operation, formValueOperations) {
    return {
        code: operation.code,
        arguments: Object.values(formValueOperations.args || {}).map((value, j) => ({
            name: operation.args[j].name,
            value: (value === null || value === void 0 ? void 0 : value.hasOwnProperty('value'))
                ? encodeConfigArgValue(value.value)
                : encodeConfigArgValue(value),
        })),
    };
}
export function configurableOperationValueIsValid(def, value) {
    if (!def || !value) {
        return false;
    }
    if (def.code !== value.code) {
        return false;
    }
    for (const argDef of def.args) {
        const argVal = value.args[argDef.name];
        if (argDef.required && (argVal == null || argVal === '' || argVal === '0')) {
            return false;
        }
    }
    return true;
}
/**
 * Returns a default value based on the type of the config arg.
 */
export function getDefaultConfigArgValue(arg) {
    if (arg.list) {
        return [];
    }
    if (arg.defaultValue) {
        return arg.defaultValue;
    }
    const type = arg.type;
    switch (type) {
        case 'string':
        case 'datetime':
        case 'float':
        case 'ID':
        case 'int':
            return null;
        case 'boolean':
            return false;
        default:
            assertNever(type);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhYmxlLW9wZXJhdGlvbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvY29tbW9uL3V0aWxpdGllcy9jb25maWd1cmFibGUtb3BlcmF0aW9uLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQVMvRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEtBQVU7SUFDeEMsSUFBSTtRQUNBLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7S0FDaEQ7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxLQUFVO0lBQzNDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLGFBQUwsS0FBSyxjQUFMLEtBQUssR0FBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNuRixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZ0NBQWdDLENBQzVDLEdBQW9DO0lBRXBDLE9BQU8sZ0NBQ0EsR0FBRyxLQUNOLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNyQix1Q0FDTyxHQUFHLEtBQ04sS0FBSyxFQUFFLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxJQUN0QztRQUNOLENBQUMsQ0FBQyxHQUNvQixDQUFDO0FBQy9CLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNILE1BQU0sVUFBVSw0QkFBNEIsQ0FDeEMsU0FBZ0MsRUFDaEMsbUJBQXdCO0lBRXhCLE9BQU87UUFDSCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7UUFDcEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQU0sbUJBQW1CLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDN0UsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUM1QixLQUFLLEVBQUUsQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQztnQkFDakMsQ0FBQyxDQUFDLG9CQUFvQixDQUFFLEtBQWEsQ0FBQyxLQUFLLENBQUM7Z0JBQzVDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUM7U0FDcEMsQ0FBQyxDQUFDO0tBQ04sQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsaUNBQWlDLENBQzdDLEdBQXFDLEVBQ3JDLEtBQXlEO0lBRXpELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDaEIsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFDRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksRUFBRTtRQUN6QixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUNELEtBQUssTUFBTSxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksRUFBRTtRQUMzQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sS0FBSyxFQUFFLElBQUksTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ3hFLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0tBQ0o7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsR0FBd0I7SUFDN0QsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFO1FBQ1YsT0FBTyxFQUFFLENBQUM7S0FDYjtJQUNELElBQUksR0FBRyxDQUFDLFlBQVksRUFBRTtRQUNsQixPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUM7S0FDM0I7SUFDRCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBcUIsQ0FBQztJQUN2QyxRQUFRLElBQUksRUFBRTtRQUNWLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxVQUFVLENBQUM7UUFDaEIsS0FBSyxPQUFPLENBQUM7UUFDYixLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssS0FBSztZQUNOLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLEtBQUssU0FBUztZQUNWLE9BQU8sS0FBSyxDQUFDO1FBQ2pCO1lBQ0ksV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3pCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZ0FyZ1R5cGUsIEN1c3RvbUZpZWxkVHlwZSB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2hhcmVkLXR5cGVzJztcclxuaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NoYXJlZC11dGlscyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgQ29uZmlnQXJnRGVmaW5pdGlvbixcclxuICAgIENvbmZpZ3VyYWJsZU9wZXJhdGlvbixcclxuICAgIENvbmZpZ3VyYWJsZU9wZXJhdGlvbkRlZmluaXRpb24sXHJcbiAgICBDb25maWd1cmFibGVPcGVyYXRpb25JbnB1dCxcclxufSBmcm9tICcuLi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIENvbmZpZ0FyZyB2YWx1ZXMgYXJlIGFsd2F5cyBzdG9yZWQgYXMgc3RyaW5ncy4gSWYgdGhleSBhcmUgbm90IHByaW1pdGl2ZXMsIHRoZW5cclxuICogdGhleSBhcmUgSlNPTi1lbmNvZGVkLiBUaGlzIGZ1bmN0aW9uIHVud3JhcHMgdGhlbSBiYWNrIGludG8gdGhlaXIgb3JpZ2luYWxcclxuICogZGF0YSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZ0FyZ1ZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiB1bmRlZmluZWQ7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlQ29uZmlnQXJnVmFsdWUodmFsdWU6IGFueSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiAodmFsdWUgPz8gJycpLnRvU3RyaW5nKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIGVtcHR5IENvbmZpZ3VyYWJsZU9wZXJhdGlvbiBvYmplY3QgYmFzZWQgb24gdGhlIGRlZmluaXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJhYmxlRGVmaW5pdGlvblRvSW5zdGFuY2UoXHJcbiAgICBkZWY6IENvbmZpZ3VyYWJsZU9wZXJhdGlvbkRlZmluaXRpb24sXHJcbik6IENvbmZpZ3VyYWJsZU9wZXJhdGlvbiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLmRlZixcclxuICAgICAgICBhcmdzOiBkZWYuYXJncy5tYXAoYXJnID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLmFyZyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBnZXREZWZhdWx0Q29uZmlnQXJnVmFsdWUoYXJnKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KSxcclxuICAgIH0gYXMgQ29uZmlndXJhYmxlT3BlcmF0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydHMgYW4gb2JqZWN0IG9mIHRoZSB0eXBlOlxyXG4gKiBgYGBcclxuICoge1xyXG4gKiAgICAgY29kZTogJ215LW9wZXJhdGlvbicsXHJcbiAqICAgICBhcmdzOiB7XHJcbiAqICAgICAgICAgc29tZVByb3BlcnR5OiAnZm9vJ1xyXG4gKiAgICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiB0byB0aGUgZm9ybWF0IGRlZmluZWQgYnkgdGhlIENvbmZpZ3VyYWJsZU9wZXJhdGlvbklucHV0IEdyYXBoUUwgaW5wdXQgdHlwZTpcclxuICogYGBgXHJcbiAqIHtcclxuICogICAgIGNvZGU6ICdteS1vcGVyYXRpb24nLFxyXG4gKiAgICAgYXJnczogW1xyXG4gKiAgICAgICAgIHsgbmFtZTogJ3NvbWVQcm9wZXJ0eScsIHZhbHVlOiAnZm9vJyB9XHJcbiAqICAgICBdXHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdG9Db25maWd1cmFibGVPcGVyYXRpb25JbnB1dChcclxuICAgIG9wZXJhdGlvbjogQ29uZmlndXJhYmxlT3BlcmF0aW9uLFxyXG4gICAgZm9ybVZhbHVlT3BlcmF0aW9uczogYW55LFxyXG4pOiBDb25maWd1cmFibGVPcGVyYXRpb25JbnB1dCB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNvZGU6IG9wZXJhdGlvbi5jb2RlLFxyXG4gICAgICAgIGFyZ3VtZW50czogT2JqZWN0LnZhbHVlczxhbnk+KGZvcm1WYWx1ZU9wZXJhdGlvbnMuYXJncyB8fCB7fSkubWFwKCh2YWx1ZSwgaikgPT4gKHtcclxuICAgICAgICAgICAgbmFtZTogb3BlcmF0aW9uLmFyZ3Nbal0ubmFtZSxcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlPy5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgPyBlbmNvZGVDb25maWdBcmdWYWx1ZSgodmFsdWUgYXMgYW55KS52YWx1ZSlcclxuICAgICAgICAgICAgICAgIDogZW5jb2RlQ29uZmlnQXJnVmFsdWUodmFsdWUpLFxyXG4gICAgICAgIH0pKSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmFibGVPcGVyYXRpb25WYWx1ZUlzVmFsaWQoXHJcbiAgICBkZWY/OiBDb25maWd1cmFibGVPcGVyYXRpb25EZWZpbml0aW9uLFxyXG4gICAgdmFsdWU/OiB7IGNvZGU6IHN0cmluZzsgYXJnczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB9LFxyXG4pIHtcclxuICAgIGlmICghZGVmIHx8ICF2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChkZWYuY29kZSAhPT0gdmFsdWUuY29kZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgYXJnRGVmIG9mIGRlZi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgYXJnVmFsID0gdmFsdWUuYXJnc1thcmdEZWYubmFtZV07XHJcbiAgICAgICAgaWYgKGFyZ0RlZi5yZXF1aXJlZCAmJiAoYXJnVmFsID09IG51bGwgfHwgYXJnVmFsID09PSAnJyB8fCBhcmdWYWwgPT09ICcwJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGRlZmF1bHQgdmFsdWUgYmFzZWQgb24gdGhlIHR5cGUgb2YgdGhlIGNvbmZpZyBhcmcuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdENvbmZpZ0FyZ1ZhbHVlKGFyZzogQ29uZmlnQXJnRGVmaW5pdGlvbik6IGFueSB7XHJcbiAgICBpZiAoYXJnLmxpc3QpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICBpZiAoYXJnLmRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBhcmcuZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdHlwZSA9IGFyZy50eXBlIGFzIENvbmZpZ0FyZ1R5cGU7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgIGNhc2UgJ2RhdGV0aW1lJzpcclxuICAgICAgICBjYXNlICdmbG9hdCc6XHJcbiAgICAgICAgY2FzZSAnSUQnOlxyXG4gICAgICAgIGNhc2UgJ2ludCc6XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYXNzZXJ0TmV2ZXIodHlwZSk7XHJcbiAgICB9XHJcbn1cclxuIl19