import { combineLatest, of, Subject } from 'rxjs';
import { distinctUntilChanged, map, shareReplay, switchMap, takeUntil, tap } from 'rxjs/operators';
/**
 * @description
 * A base class for entity detail views. It should be used in conjunction with the
 * {@link BaseEntityResolver}.
 *
 * @example
 * ```TypeScript
 * \@Component({
 *   selector: 'app-my-entity',
 *   templateUrl: './my-entity.component.html',
 *   styleUrls: ['./my-entity.component.scss'],
 *   changeDetection: ChangeDetectionStrategy.OnPush,
 * })
 * export class GlobalSettingsComponent extends BaseDetailComponent<MyEntity.Fragment> implements OnInit {
 *   detailForm: FormGroup;
 *
 *   constructor(
 *     router: Router,
 *     route: ActivatedRoute,
 *     serverConfigService: ServerConfigService,
 *     protected dataService: DataService,
 *     private formBuilder: FormBuilder,
 *   ) {
 *     super(route, router, serverConfigService, dataService);
 *     this.detailForm = this.formBuilder.group({
 *       name: [''],
 *     });
 *   }
 *
 *   protected setFormValues(entity: MyEntity.Fragment, languageCode: LanguageCode): void {
 *     this.detailForm.patchValue({
 *       name: entity.name,
 *     });
 *   }
 * }
 * ```
 *
 * @docsCategory list-detail-views
 */
export class BaseDetailComponent {
    constructor(route, router, serverConfigService, dataService) {
        this.route = route;
        this.router = router;
        this.serverConfigService = serverConfigService;
        this.dataService = dataService;
        this.destroy$ = new Subject();
    }
    init() {
        this.entity$ = this.route.data.pipe(switchMap(data => data.entity.pipe(takeUntil(this.destroy$))), tap(entity => (this.id = entity.id)), shareReplay(1));
        this.isNew$ = this.entity$.pipe(map(entity => entity.id === ''), shareReplay(1));
        this.languageCode$ = this.route.paramMap.pipe(map(paramMap => paramMap.get('lang')), switchMap(lang => {
            if (lang) {
                return of(lang);
            }
            else {
                return this.dataService.client.uiState().mapSingle(data => data.uiState.contentLanguage);
            }
        }), distinctUntilChanged(), shareReplay(1));
        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();
        combineLatest(this.entity$, this.languageCode$)
            .pipe(takeUntil(this.destroy$))
            .subscribe(([entity, languageCode]) => {
            this.setFormValues(entity, languageCode);
            this.detailForm.markAsPristine();
        });
    }
    destroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    setLanguage(code) {
        this.setQueryParam('lang', code);
        this.dataService.client.setContentLanguage(code).subscribe();
    }
    canDeactivate() {
        return this.detailForm && this.detailForm.pristine;
    }
    setCustomFieldFormValues(customFields, formGroup, entity, currentTranslation) {
        var _a, _b, _c;
        for (const fieldDef of customFields) {
            const key = fieldDef.name;
            const value = fieldDef.type === 'localeString'
                ? (_b = (_a = currentTranslation) === null || _a === void 0 ? void 0 : _a.customFields) === null || _b === void 0 ? void 0 : _b[key]
                : (_c = entity.customFields) === null || _c === void 0 ? void 0 : _c[key];
            const control = formGroup === null || formGroup === void 0 ? void 0 : formGroup.get(key);
            if (control) {
                control.patchValue(value);
            }
        }
    }
    getCustomFieldConfig(key) {
        return this.serverConfigService.getCustomFieldsFor(key);
    }
    setQueryParam(key, value) {
        this.router.navigate([
            './',
            Object.assign(Object.assign({}, this.route.snapshot.params), { [key]: value }),
        ], {
            relativeTo: this.route,
            queryParamsHandling: 'merge',
        });
    }
}
//# sourceMappingURL=data:application/json;base64,